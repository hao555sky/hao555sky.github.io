[{"title":"流年| 遇事多思量 12.11-12.21","date":"2016-12-21T04:52:21.000Z","path":"2016/12/21/流年-遇事多思量-12-11-12-17/","text":"纵有千言万语，却不知如何诉诸于笔端。奈何人世险恶，只叹自己遇事未三思 事情缘由也不想过多谈及，毕竟也非喜事，仅望自己能像古语所说，吃一堑长一智。生活，遇到有所影响心境的事情，都应该深刻印于脑海，或记录在文章中，以便自己能够增长对生活的感悟，对世事的认知。 自觉对人一直以诚相待，答应之事也尽我所能，虽然仍自私自利，但在可控之内，能尽量不在威胁他人利益时保证自己。但一直苦恼为人处世的方式，明明有些人最后得了益处，却也获得了所谓的好感。而我诚心待人，有时还伤害了自己，却仍旧未能皆大欢喜。社会很多人都推崇为人处世是一门学问，我也这样认为，但却一直觉得诚心待人为根本，看来还是太傻。人么？总是需要两幅面孔，适当时机适当变换。 感悟 做事三思而后行，事情都有利弊，考虑清楚 诚心待人要分人，并不是每个人都值得自己去交，更不是每个人都值得自己真诚待人。 遇到共同利益，要认真思量，不要做枪，也不用枪。","tags":[{"name":"流年","slug":"流年","permalink":"http://hao555sky.cn/tags/流年/"}]},{"title":"流年 | 孤独，报以沉默 12.06-12.10","date":"2016-12-10T13:15:05.000Z","path":"2016/12/10/流年-孤独，报以沉默-12-06-12-10/","text":"又一次莫名的想起了青岛的生活，说来可笑，原因很简单，想来想去，陌生的北京竟然没有一个能陪我一起逛超市的人。 双十二的今天，健身结束后，师兄讲某某超市打折，我原本就不是醉心学术的人，必定打算逛逛超市，是否购买东西是次要的，只不过想打发掉无聊的周末。想法是好的，却没有想到，身边根本就没有会陪我一起出去的人。 想来，周围的人还是极好的，只不过自己过于敏感，总是觉得不想麻烦别人，更不想在认为不太熟的情况下，做些自认为很熟的事情。人嘛，总是这样，当面对陌生的环境，陌生的人群中，在身体或者心里中，总会呈现出某种防御姿态。 想起青岛，只是因为青岛有挂念的人，难忘的事。每当夜深人静或者孤独脆弱时，总会怀念青岛的一幕幕，石老人海滩放肆尽兴的奔跑，香港东路愉快满足的烧烤，八大关美轮美奂的落叶，都会像石老人黄昏的潮水般一股脑的涌入脑海。虽然明明心里知道，过去发生的细节早已记不清楚，只不过当时的感觉甚是强烈，以至于现在想来，都能触摸到旧事的温度，扬起嘴角。 相信过去的时光也曾后悔，也曾抱怨，但经过岁月的流失，留存下来的都是对古人的怀念，对旧事的追忆。 愿我们都被这世界，这时光温柔相待。 记得当时年纪小 你爱谈天我爱笑并肩坐在桃树下 风在林梢鸟在叫不知怎样睡着了 梦里花落知多少","tags":[{"name":"流年","slug":"流年","permalink":"http://hao555sky.cn/tags/流年/"}]},{"title":"Hello World","date":"2016-12-08T08:32:01.445Z","path":"2016/12/08/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"前端","slug":"前端","permalink":"http://hao555sky.cn/tags/前端/"}]},{"title":"Service 初探","date":"2016-12-08T08:25:49.000Z","path":"2016/12/08/Service-初探/","text":"Service 初探[TOC] ServiceService 是一个在后台长时间运行并执行操作而不使用用户界面的应用组件。Service没有用户界面，摆明了就是不让用户操作，但是它怎么工作呢？原来Service可以由组件启动或者将组件绑定到Service，进而执行相关操作，并且这一切全都在后台进行。 Service 工作形式启动 启动方式: 应用组件调用startService()，Service即处于启动状态。 生命周期: Service 在后台无限期运行，即使启动服务的组件被销毁也不受影响。 存在形式: 启动的服务通常执行单一操作，且不会将结果返回给调用方。 通信方式: startService()传递的Intent 结束方式: 服务使用stopSelf() 或者由其他组件调用stopService()停止。 绑定 启动方式: 应用组件调用bindService()，Service即处于绑定状态。 生命周期: 多个组件可同时绑定到该服务，只有当所有的组件取消绑定后，服务才会被销毁。 存在形式: 通信方式: 绑定服务提供了一个客户端-服务器接口，允许组件与服务进行交互、发送请求、获取结果甚至是利用进程 间通信(IPC)跨进程执行这些操作。 结束方式: 取消该服务与所有客户端之间的绑定，系统便会销毁该服务 注意 服务也可以同时以两种方式运行，即它可以是启动服务(无限期运行)，也允许绑定。关键在于是否实现了回调方法: onStartCommand()（允许组件启动服务）和onBind()（允许绑定服务）。 服务默认在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。也就表明，若服务将执行某些耗时操作，则应创建新线程执行，可以让主线程专注于用户与Activity之间的交互。 如何创建Service创建Service的子类（或使用现有子类，例如IntentService）。重写一些关键的回调方法，要重写的回调方法包括 onStartCommand() 当另一个组件（如Activity）调用startService()启动服务时，系统调用此方法。若只想提供绑定，则无需实现此方法。 onBind() 当另一个组件调用bindService()与服务绑定时，系统调用此方法。在此方法的实现中，返回IBinder对象，供客户端与服务进行通信。如果不希望绑定，应返回null。 onCreate() 在每个service的生命周期中只会被调用一次，并且在onStartCommand()以及onBind()之前，故可在此方法中进行一些一次性的初始化工作。 onDestroy() 这是服务调用的最后一个方法。当这个方法被调用后，服务将不再使用且被销毁，故可在此方法中清理所有资源，比如线程、注册的侦听器等。 使用清单文件声明服务同其他组件一样，要在manifest文件中声明所有服务。即添加&lt;service&gt;元素作为&lt;application&gt;元素的子元素&lt;service&gt;元素包含众多属性，来定义一些特性。android:name 属性是唯一必须的属性，用于指定服务的类名android相关属性 1234567891011&lt;service android:description=\"string resource\" android:enabled=[\"true\" | \"false\"] android:exported=[\"true\" | \"false\"] android:icon=\"drawable resource\" android:isolatedProcess=[\"true\" | \"false\"] android:label=\"string resource\" android:name=\"string\" android:permission=\"string\" android:process=\"string\" &gt; . . . &lt;/service&gt; 注意 为了保证应用的安全性，尽量使用显示Intent启动或者绑定Service，且不要声明Intent filter. 尽量添加android:exported=false属性，确保服务仅适用你的应用。 创建启动服务一般来说，可以扩展两个类来创建启动服务: Service适用于所有服务的基类。扩展此类时，默认情况，服务将使用应用的主线程，会降低正在运行的所有Activity的性能。故必须创建一个用于执行所有服务工作的新线程。 IntentService这是 Service 的子类，它使用工作线程逐一处理所有启动请求。如果您不要求服务同时处理多个请求，这是最好的选择。 您只需实现 onHandleIntent() 方法即可，该方法会接收每个启动请求的 Intent，使您能够执行后台工作。 扩展Service类12345678910111213141516171819202122232425262728public class CommonServiceDemo extends Service &#123; private static final String TAG = \"CommonServiceDemo\"; @Override public void onCreate()&#123; super.onCreate(); Log.d(TAG, \"onCreate\"); &#125; @Override public int onStartCommand(Intent intent, int flags, int startId)&#123; Log.d(TAG, \"onStartCommand\"); return super.onStartCommand(intent, flags, startId); &#125; @Nullable @Override public IBinder onBind(Intent intent)&#123; Log.d(TAG, \"onBind\"); return null; &#125; @Override public void onDestroy()&#123; Log.d(TAG, \"onDestroy\"); super.onDestroy(); &#125;&#125; Manifest文件&lt;service android:name=&quot;.ServiceDemo&quot; /&gt; 扩展IntentService类如果启动服务不需要同时处理多个请求（实际上，这种多线程情况可能很危险），所以使用IntentService类实现服务是最好的选择。IntentService操作: 创建默认的工作线程，用于在应用的主线程外执行传递给onStartCommand()的所有Intent 创建工作队列，用于将Intent逐一传递给onHandleIntent()实现，这样就不必担心多线程问题 处理完所有启动请求后停止服务，因此不必调用stopSelf() 提供onBind()的默认实现（返回null） 提供onStartCommand()的默认实现，可将Intent一次发送到工作队列和onHandleIntent()实现2zhixu实现一个构造函数和onHandleIntent()方法即可123456789101112131415public class HelloIntentService extends IntentService &#123; public HelloIntentService()&#123; super(\"HelloIntentService\"); &#125; @Override protected void onHandleIntent(Intent intent)&#123; try &#123; Thread.sleep(5000); &#125;catch (InterruptedException e)&#123; Thread.currentThread().interrupt(); &#125; &#125;&#125; 启动服务在Activity或者其他应用组建中，可通过Intent传递给startService()启动服务。Android 系统调用服务的 onStartCommand() 方法，并向其传递 Intent。（切勿直接调用 onStartCommand()。） 例如，显示Intent传递给startService，启动服务CommanServiceDemo12Intent intent = new Intent(MainActivity.this, CommonServiceDemo.class);startService(intent); 注意 如果服务尚未运行，则系统会先调用 onCreate()，然后再调用 onStartCommand()。 多个服务启动请求会导致多次对服务的 onStartCommand() 进行相应的调用。但是，要停止服务，只需一个服务停止请求（使用 stopSelf() 或 stopService()）即可。 创建绑定服务要创建绑定服务，必须实现onBind()方法，返回IBinder对象，作为客户端与服务通信的接口。 多个客户端可以同时绑定到服务。客户端完成与服务的交互后，会调用 unbindService() 取消绑定。一旦没有客户端绑定到该服务，系统就会销毁它。 绑定服务的实现比启动服务更加复杂，故放到下一篇博客 结语本篇博客主要讲解了service的一些基本知识，包括什么是service，service的类别，如果创建service，如何启动service，关于service中的绑定服务，生命周期，以及启动服务的扩展Service（执行多线程而不是通过工作队列处理启动请求），前台运行的相关知识还未讲解，故希望日后能都学习补全。","tags":[{"name":"Android","slug":"Android","permalink":"http://hao555sky.cn/tags/Android/"}]}]